/**
 * BalanCoffee - Shift Management Module
 * Qu·∫£n l√Ω ca l√†m vi·ªác v√† nh√¢n vi√™n
 */

// =============================================================================
// SHIFT MANAGEMENT FUNCTIONS
// =============================================================================

/**
 * Start a new work shift
 */
function startNewShift() {
    try {
        window.Utils.debugLog('üöÄ Starting new shift...');
        
        if (!handleExistingShift()) {
            return;
        }
        
        startShiftProcess();
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error starting new shift:', error);
        window.UIManager.showNotification('L·ªói b·∫Øt ƒë·∫ßu ca l√†m vi·ªác: ' + error.message, 'error');
    }
}

/**
 * Handle existing shift if any
 * @returns {boolean} - True to continue, false to abort
 */
function handleExistingShift() {
    if (window.shiftStartTime && window.currentShiftEmployee) {
        const confirmEnd = confirm('C√≥ ca l√†m vi·ªác ƒëang ho·∫°t ƒë·ªông. B·∫°n c√≥ mu·ªën k·∫øt th√∫c ca hi·ªán t·∫°i v√† b·∫Øt ƒë·∫ßu ca m·ªõi kh√¥ng?');
        if (!confirmEnd) {
            window.Utils.debugLog('‚ö†Ô∏è User cancelled starting new shift');
            return false;
        }
        
        // End current shift first
        if (typeof endShift === 'function') {
            endShift();
        }
    }
    return true;
}

/**
 * Start the shift process
 */
function startShiftProcess() {
    // Show employee info modal or prompt
    if (typeof window.ModalManager?.showEmployeeModal === 'function') {
        window.ModalManager.showEmployeeModal();
    } else {
        startShiftWithPrompts();
    }
}

/**
 * Start shift using simple prompts as fallback
 */
function startShiftWithPrompts() {
    const employeeName = prompt('Nh·∫≠p t√™n nh√¢n vi√™n:');
    if (!employeeName || employeeName.trim() === '') {
        window.UIManager.showNotification('T√™n nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng', 'error');
        return;
    }
    
    const shiftNote = prompt('Ghi ch√∫ ca l√†m vi·ªác (t√πy ch·ªçn):') || '';
    
    createNewShift(employeeName.trim(), shiftNote.trim());
}

/**
 * Create and save new shift
 */
function createNewShift(employeeName, shiftNote) {
    // Start the shift
    const now = new Date();
    window.shiftStartTime = now.toISOString();
    window.currentShiftEmployee = employeeName;
    window.currentShiftNote = shiftNote;
    
    // Save to localStorage
    localStorage.setItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_START, window.shiftStartTime);
    localStorage.setItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_EMPLOYEE, window.currentShiftEmployee);
    localStorage.setItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_NOTE, window.currentShiftNote);
    
    updateUIAfterShiftStart();
}

/**
 * Update UI after shift start
 */
function updateUIAfterShiftStart() {
    // Update UI
    if (window.updateShiftDisplay) {
        window.updateShiftDisplay();
    }
    if (window.UIManager?.updateAllUIStats) {
        window.UIManager.updateAllUIStats();
    }
    
    window.Utils.debugLog(`‚úÖ New shift started by ${window.currentShiftEmployee} at ${window.Utils.formatDateTime(window.shiftStartTime)}`);
    window.UIManager.showNotification(`Ca l√†m vi·ªác c·ªßa ${window.currentShiftEmployee} ƒë√£ b·∫Øt ƒë·∫ßu`, 'success');
    
    // Trigger haptic feedback on mobile
    if (window.triggerHapticFeedback) {
        window.triggerHapticFeedback('medium');
    }
}

/**
 * View current shift information
 */
function viewCurrentShift() {
    try {
        window.Utils.debugLog('üëÅÔ∏è Viewing current shift information...');
        
        if (!window.shiftStartTime || !window.currentShiftEmployee) {
            window.UIManager.showNotification('Kh√¥ng c√≥ ca l√†m vi·ªác n√†o ƒëang ho·∫°t ƒë·ªông', 'warning');
            return;
        }
        
        // Calculate shift duration
        const startTime = new Date(window.shiftStartTime);
        const currentTime = new Date();
        const durationMs = currentTime - startTime;
        const hours = Math.floor(durationMs / (1000 * 60 * 60));
        const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));
        
        // Show shift information
        const shiftInfo = `
Th√¥ng tin ca l√†m vi·ªác hi·ªán t·∫°i:
- Nh√¢n vi√™n: ${window.currentShiftEmployee}
- B·∫Øt ƒë·∫ßu: ${window.Utils.formatDateTime(window.shiftStartTime)}
- Th·ªùi gian l√†m vi·ªác: ${hours}h ${minutes}m
- Ghi ch√∫: ${window.currentShiftNote || 'Kh√¥ng c√≥'}
        `.trim();
        
        alert(shiftInfo);
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error viewing current shift:', error);
        window.UIManager.showNotification('L·ªói xem th√¥ng tin ca l√†m vi·ªác', 'error');
    }
}

/**
 * Pause current shift
 */
function pauseShift() {
    try {
        if (!window.shiftStartTime) {
            window.UIManager.showNotification('Kh√¥ng c√≥ ca l√†m vi·ªác n√†o ƒëang ho·∫°t ƒë·ªông', 'warning');
            return;
        }
        
        window.UIManager.showNotification('T√≠nh nƒÉng t·∫°m d·ª´ng ca l√†m vi·ªác s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn', 'info');
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error pausing shift:', error);
        window.UIManager.showNotification('L·ªói t·∫°m d·ª´ng ca l√†m vi·ªác', 'error');
    }
}

/**
 * End current shift
 */
function endShift() {
    try {
        if (!window.shiftStartTime || !window.currentShiftEmployee) {
            window.UIManager.showNotification('Kh√¥ng c√≥ ca l√†m vi·ªác n√†o ƒëang ho·∫°t ƒë·ªông', 'warning');
            return;
        }
        
        if (typeof window.ModalManager?.showEndShiftModal === 'function') {
            window.ModalManager.showEndShiftModal();
        } else {
            const confirmEnd = confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën k·∫øt th√∫c ca l√†m vi·ªác c·ªßa ${window.currentShiftEmployee}?`);
            if (confirmEnd) {
                // Clear shift data
                window.shiftStartTime = null;
                window.currentShiftEmployee = null;
                window.currentShiftNote = null;
                
                // Clear localStorage
                localStorage.removeItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_START);
                localStorage.removeItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_EMPLOYEE);
                localStorage.removeItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_NOTE);
                
                // Update UI
                if (window.updateShiftDisplay) {
                    window.updateShiftDisplay();
                }
                if (window.UIManager?.updateAllUIStats) {
                    window.UIManager.updateAllUIStats();
                }
                
                window.UIManager.showNotification('Ca l√†m vi·ªác ƒë√£ k·∫øt th√∫c', 'success');
            }
        }
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error ending shift:', error);
        window.UIManager.showNotification('L·ªói k·∫øt th√∫c ca l√†m vi·ªác', 'error');
    }
}

/**
 * Update shift display in UI
 */
function updateShiftDisplay() {
    try {
        window.Utils.debugLog('üîÑ Updating shift display...');
        
        const shiftDisplayElement = document.getElementById('shift-display');
        const currentTimeElement = document.getElementById('current-time');
        
        // Update current time
        if (currentTimeElement) {
            const now = new Date();
            currentTimeElement.textContent = window.Utils.formatDateTime(now.toISOString());
        }
        
        // Update shift info
        if (shiftDisplayElement) {
            if (window.shiftStartTime && window.currentShiftEmployee) {
                // Calculate duration
                const startTime = new Date(window.shiftStartTime);
                const currentTime = new Date();
                const durationMs = currentTime - startTime;
                const hours = Math.floor(durationMs / (1000 * 60 * 60));
                const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));
                
                shiftDisplayElement.innerHTML = `
                    <div class="shift-active">
                        <span class="shift-indicator active"></span>
                        <div class="shift-info">
                            <div class="shift-employee">${window.currentShiftEmployee}</div>
                            <div class="shift-duration">${hours}h ${minutes}m</div>
                        </div>
                    </div>
                `;
            } else {
                shiftDisplayElement.innerHTML = `
                    <div class="shift-inactive">
                        <span class="shift-indicator inactive"></span>
                        <div class="shift-info">
                            <div class="shift-employee">Ch∆∞a b·∫Øt ƒë·∫ßu ca</div>
                        </div>
                    </div>
                `;
            }
        }
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error updating shift display:', error);
    }
}

/**
 * Load shift data from localStorage
 */
function loadShiftData() {
    try {
        window.Utils.debugLog('üìñ Loading shift data from localStorage...');
        
        const savedShiftStart = localStorage.getItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_START);
        const savedShiftEmployee = localStorage.getItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_EMPLOYEE);
        const savedShiftNote = localStorage.getItem(window.BalanCoffeeConfig.STORAGE_KEYS.SHIFT_NOTE);
        
        if (savedShiftStart && savedShiftEmployee) {
            window.shiftStartTime = savedShiftStart;
            window.currentShiftEmployee = savedShiftEmployee;
            window.currentShiftNote = savedShiftNote || null;
            
            window.Utils.debugLog(`‚úÖ Shift data loaded: ${window.currentShiftEmployee} since ${window.Utils.formatDateTime(window.shiftStartTime)}`);
        } else {
            window.Utils.debugLog('‚ÑπÔ∏è No saved shift data found');
        }
        
    } catch (error) {
        window.Utils.debugError('‚ùå Error loading shift data:', error);
    }
}

/**
 * Filter invoices by shift
 */
function filterByShift(invoices, filterValue) {
    return invoices.filter(invoice => invoice.shiftId === filterValue);
}

// =============================================================================
// SHIFT MANAGER EXPORTS
// =============================================================================

window.ShiftManager = {
    startNewShift,
    viewCurrentShift,
    pauseShift,
    endShift,
    updateShiftDisplay,
    loadShiftData,
    filterByShift
};

// Export individual functions to window for HTML compatibility
window.startNewShift = startNewShift;
window.viewCurrentShift = viewCurrentShift;
window.pauseShift = pauseShift;
window.endShift = endShift;
window.updateShiftDisplay = updateShiftDisplay;
window.loadShiftData = loadShiftData;

console.log('‚úÖ Shift Manager module loaded successfully');

// Export Shift Manager namespace
window.ShiftManager = {
    // Shift management
    startShift: window.startShift,
    endShift: window.endShift,
    updateShiftDisplay: window.updateShiftDisplay,
    
    // Shift data
    getShiftData: window.getShiftData,
    loadShiftData: window.loadShiftData,
    saveShiftData: window.saveShiftData,
    calculateShiftTotal: window.calculateShiftTotal,
    
    // Export and clearing
    exportShiftData: window.exportShiftData,
    clearShiftData: window.clearShiftData
};
